apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'com.gradle.plugin-publish'

ext {
    sharedDir      = file("${project.rootDir}/shared")
    gradle_publish = project.hasProperty('gradle.publish.key') && project.hasProperty('gradle.publish.secret')
}

if (gradle_publish) {
    apply plugin: 'signing'
}

def versionMaintenance = (gradle_publish)? sailfish_version_maintenance: '0'
def versionSuffix = (gradle_publish)? '': '-SNAPSHOT'

group = 'com.exactpro.sailfish-gradle-plugin'
version = "${sailfish_version_major}.${sailfish_version_minor}.${versionMaintenance}${versionSuffix}"
archivesBaseName = rootProject.name

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    if(JavaVersion.current() >= JavaVersion.VERSION_11) {
        implementation 'javax.xml.bind:jaxb-api:2.3.0'
    }

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    api group: 'org.freemarker', name: 'freemarker', version: '2.3.30'

    implementation group: 'io.fixprotocol.orchestra', name: 'repository-quickfix', version: '1.5.0'

    implementation 'commons-io:commons-io:1.4'
    implementation 'com.google.guava:guava:32.0.0-jre'
}

configurations.configureEach {
    resolutionStrategy {
        force 'org.apache.logging.log4j:log4j-core:2.18.0'
    }
}

sourceCompatibility = JavaVersion.VERSION_11 //Java version compatibility to use when compiling Java source.
targetCompatibility = JavaVersion.VERSION_11 //Java version to generate classes for.

sourceSets {
    main {
        java {
            srcDirs = []
        }
        groovy {
            srcDirs = ['src/main/java', 'src/main/groovy']
        }
    }
}

buildscript { // artifacrory plugin
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.4.12')
        classpath(group: 'com.bmuschko', name: 'gradle-tomcat-plugin', version: '2.2.2')
        classpath(group: 'com.gradle.plugin-publish', name: 'com.gradle.plugin-publish.gradle.plugin', version: '1.2.1')
    }
}

wrapper {
    gradleVersion = '7.6.3'
    distributionType = 'bin'
}

repositories {
    maven {
        name 'MavenLocal' // for local builds only
        url sharedDir
    }
    mavenCentral()
}

tasks.register('zipFixTypes', Zip) {
    from('src/main/resources/fix/')
    include('types.xml')
    archiveClassifier = 'fixtypes'
}

artifactory {
    publish {
        defaults {
            // Reference to Gradle configurations defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publishConfigs('archives')
        }
    }
}

publishing {
    publications {
        MavenJava(MavenPublication) {
            from components.java

            artifact(zipFixTypes)

            if (gradle_publish) {
                pom {
                    name = 'Exactpro Sailfish Gradle plugin'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description 'Gradle toolset for Sailfish build. Sailfish is Test automation solution we\'re releasing to open source.'
                    url = 'https://github.com/Exactpro/sailfish-gradle-plugin'

                    scm {
                        connection = 'scm:git:https://github.com/Exactpro/sailfish-gradle-plugin'
                        developerConnection = 'scm:git:https://github.com/Exactpro/sailfish-gradle-plugin'
                        url = 'https://github.com/Exactpro/sailfish-gradle-plugin'
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'Nikita-Smirnov-Exactpro'
                            name = 'Nikita Smirnov'
                            email = 'nikita.smirnov@exactprosystems.com'
                        }
                    }
                }
            } else {
                // Remove any invalid maven-metadata.xml files that may have been created
                // for SNAPSHOT versions that are *not* uniquely versioned.
                pom {
                    if (version.endsWith('-SNAPSHOT')) {
                        final File artifactDir = new File(rootProject.ext.sharedDir,
                                groupId.replace('.', '/')
                                        + '/' + artifactId
                                        + '/' + version)
                        delete fileTree(dir: artifactDir, include: 'maven-metadata.xml*')
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url = "file://${sharedDir}"
        }
    }
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    dependsOn classes
    archiveClassifier = 'javadoc'
    from javadoc
}

artifacts {
    archives sourcesJar, javadocJar, zipFixTypes
}

gradlePlugin {
    website = 'https://github.com/Exactpro/sailfish-gradle-plugin'
    vcsUrl = 'https://github.com/Exactpro/sailfish-gradle-plugin.git'
    plugins {
        sailfish {
            id = 'com.exactpro.sf.sailfish'
            displayName = 'Gradle plugin for Sailfish'
            description = 'Gradle toolset for Sailfish build. Sailfish is Test automation solution we\'re releasing to open source.'
            tags.set(['Exactpro', 'Sailfish'])
            implementationClass = 'com.exactpro.sf.Sailfish'
        }
    }
}

if (gradle_publish) {
    tasks.withType(Sign).configureEach {
        onlyIf {
            project.hasProperty('signing.keyId') && project.hasProperty('signing.password')
        }
    }

    signing {
        sign publishing.publications.MavenJava
    }
}