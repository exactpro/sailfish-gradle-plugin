apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'groovy'

ext {
    sharedDir        = file("${project.rootDir}/shared")
    sonatype_publish = project.hasProperty('sonatypePublish') ? true : false
}

if (sonatype_publish) {
    apply plugin: 'signing'
}

def versionSuffix = (sonatype_publish)? '': '-SNAPSHOT'

group = 'com.exactpro.sailfish-gradle-plugin'
version = "${sailfish_version_major}.${sailfish_version_minor}.${sailfish_version_maintenance}${versionSuffix}"
archivesBaseName = 'sailfish-gradle-plugin'

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    if(JavaVersion.current() >= JavaVersion.VERSION_11) {
        implementation 'javax.xml.bind:jaxb-api:2.3.0'
    }

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    api group: 'org.freemarker', name: 'freemarker', version: '2.3.24-incubating'

    implementation group: 'io.fixprotocol.orchestra', name: 'repository-quickfix', version: '1.5.0'

    implementation 'commons-io:commons-io:1.4'
    implementation 'com.google.guava:guava:18.0'
}

sourceCompatibility = JavaVersion.VERSION_11 //Java version compatibility to use when compiling Java source.
targetCompatibility = JavaVersion.VERSION_11 //Java version to generate classes for.

sourceSets {
    main {
        java {
            srcDirs = []
        }
        groovy {
            srcDirs = ['src/main/java', 'src/main/groovy']
        }
    }
}

buildscript { // artifacrory plugin
    repositories {
        jcenter()
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.4.12')
        classpath(group: 'com.bmuschko', name: 'gradle-tomcat-plugin', version: '2.2.2')
    }
}

wrapper {
    gradleVersion = '7.6.3'
    distributionType = 'bin'
}

repositories {
    maven {
        name 'MavenLocal' // for local builds only
        url sharedDir
    }
    jcenter()
}

task zipFixTypes(type: Zip) {
    from ('src/main/resources/fix/')
    include('types.xml')
    classifier = 'fixtypes'
}

artifacts {
    archives zipFixTypes
}

artifactory {
    publish {
        defaults {
            // Reference to Gradle configurations defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publishConfigs('archives')
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            if (sonatype_publish) {
                beforeDeployment {
                    signing {
                        sign deployment
                    }
                }

                pom.project {
                    name 'Exactpro Sailfish Gradle plugin'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description 'Gradle toolset for Sailfish build. Sailfish is Test automation solution we\'re releasing to open source.'
                    url 'https://github.com/Exactpro/sailfish-gradle-plugin'

                    scm {
                        connection 'scm:git:https://github.com/Exactpro/sailfish-gradle-plugin'
                        developerConnection 'scm:git:https://github.com/Exactpro/sailfish-gradle-plugin'
                        url 'https://github.com/Exactpro/sailfish-gradle-plugin'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'Nikita-Smirnov-Exactpro'
                            name 'Nikita Smirnov'
                            email 'nikita.smirnov@exactprosystems.com'
                        }
                    }
                }
            } else {
                // Remove any invalid maven-metadata.xml files that may have been created
                // for SNAPSHOT versions that are *not* uniquely versioned.
                pom {
                    if (version.endsWith('-SNAPSHOT')) {
                        final File artifactDir = new File(rootProject.ext.sharedDir,
                                groupId.replace('.', '/')
                                        + '/' + artifactId
                                        + '/' + version)
                        delete fileTree(dir: artifactDir, include: 'maven-metadata.xml*')
                    }
                }
            }
        }
    }

    repositories {
        if (sonatype_publish) {
            maven {
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }

            maven {
                url = "https://oss.sonatype.org/content/repositories/snapshots"
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        } else {
            maven {
                url = "file://${sharedDir}"
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: classes) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives sourcesJar, javadocJar
}

if (sonatype_publish) {
    signing {
        sign configurations.archives
    }
}